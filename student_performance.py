# -*- coding: utf-8 -*-
"""Student_Performance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ZDDjUdV1O1Behtw_5KQhMlTFCEP6N0Y
"""

import numpy as np
import pandas as pd
import seaborn as sns
import warnings
import os
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler
from sklearn.feature_selection import mutual_info_classif

#1
df = pd.read_csv('Student_Performance.csv')
df

df.info()

df.describe()

df.columns.tolist()

df.columns = df.columns.str.replace(' ', '_')

df

#2
df.isnull().sum()

#3
X = df.drop(['Performance_Index'], axis = 1)
y = df.Performance_Index

X

y

#6
df['Extracurricular_Activities'].unique()

le  = LabelEncoder()

df['Extracurricular_Activities_Encoded'] = le.fit_transform(df["Extracurricular_Activities"])

df.drop('Extracurricular_Activities',axis=1, inplace=True)

df

df.corr()

plt.figure(figsize=(16,8))
sns.heatmap(df.corr(), annot=True)

#4
df.boxplot(rot = 90)

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1

upper_limit = df.quantile(0.75) + 1.5 * IQR
lower_limit = df.quantile(0.25) - 1.5 * IQR

out1 = df[df > upper_limit].count()
out2 = df[df <lower_limit ].count()
outliers = out1 + out2

outliers

#5
sc = StandardScaler()
df['Hours_Studied_scaled'] = sc.fit_transform(df[['Hours_Studied']])
df['Previous_Scores_scaled'] = sc.fit_transform(df[['Previous_Scores']])
df['Sample_Question_Papers_Practiced_scaled'] = sc.fit_transform(df[['Sample_Question_Papers_Practiced']])
df['Performance_Index_scaled'] = sc.fit_transform(df[['Performance_Index']])

new_columns = []
for i in df.columns:
  if ('scaled' in i) or ('Encoded' in i):
    new_columns.append(i)

df = df[new_columns]

df

import matplotlib.pyplot as plt
plt.figure(figsize=(16,8))
sns.heatmap(df.corr(), annot=True)

#7,8,9,10
X = df.drop('Extracurricular_Activities_Encoded', axis=1)
y = df['Extracurricular_Activities_Encoded']

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr_model = LogisticRegression()

lr_model.fit(X_train, y_train)

train_predictions = lr_model.predict(X_train)
train_rmse = mean_squared_error(y_train, train_predictions, squared=False)
print("Train RMSE:", train_rmse)

test_predictions = lr_model.predict(X_test)
test_rmse = mean_squared_error(y_test, test_predictions, squared=False)
print("Test RMSE:", test_rmse)

from sklearn.metrics import mean_absolute_error, mean_squared_error

mae = mean_absolute_error(y_test, test_predictions)
mse = mean_squared_error(y_test, test_predictions)
rmse = mean_squared_error(y_test, test_predictions, squared=False)

print("Test MAE:", mae)
print("Test MSE:", mse)
print("Test RMSE:", rmse)

